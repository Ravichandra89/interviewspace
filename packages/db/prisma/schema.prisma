generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  INTERVIEWER
  CANDIDATE
}

enum ExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
}

//  User model - Database Schema
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(CANDIDATE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions       Session[]   @relation("SessionParticipants")
  interviewerFor Session[]   @relation("InterviewerSessions")
  executions     Execution[]
}

//  Session model - Database Schema
model Session {
  id        String    @id @default(uuid())
  title     String?
  createdAt DateTime  @default(now())
  startsAt  DateTime?
  endsAt    DateTime?

  // Interviewer Relation
  interviewer   User   @relation("InterviewerSessions", fields: [interviewerId], references: [id])
  interviewerId String

  // Participants Relation
  participants User[] @relation("SessionParticipants")

  // Optional problem attached to session
  problem    Problem?    @relation(fields: [problemId], references: [id])
  problemId  String?
  executions Execution[]
}

//  Problem model - DB Schema
model Problem {
  id          String   @id @default(uuid())
  title       String
  description String
  createdAt   DateTime @default(now())

  testCases TestCase[]
  sessions  Session[]
}

//  TestCase model - DB Schema
model TestCase {
  id       String @id @default(uuid())
  input    String
  expected String
  order    Int

  problem   Problem      @relation(fields: [problemId], references: [id])
  problemId String
  results   TestResult[]
}

//  Execution model - DB Schema
model Execution {
  id          String          @id @default(uuid())
  code        String
  language    String
  status      ExecutionStatus @default(PENDING)
  startedAt   DateTime?       @default(now())
  completedAt DateTime?

  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  results TestResult[]
}

//  TestResult model - DB Schema
model TestResult {
  id     String  @id @default(uuid())
  passed Boolean
  output String

  execution   Execution @relation(fields: [executionId], references: [id])
  executionId String

  testCase   TestCase @relation(fields: [testCaseId], references: [id])
  testCaseId String
}
