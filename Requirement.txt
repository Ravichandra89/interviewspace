High Level Feature Breakdown : 
    1. Interview Flow : 
        - Session Creation - Interviewer
        - Invite Link - Role Based
        - Collabrative Editor - (Candidate â†” Interviewer)
        - Code Execution - Run, Test, Multi - Language
        - Feedback & Sharing
        - Session Replay

    2. Additional Features : 
        - Question Bank (CRUD, Tagging, difficulty)
        - Chat & Video Call Support
        - User & Org Management
    
Contexts : 
    - Identify - Users, Roles, Permissions
    - Interview - Session lifeCycle, Scheduling, invitations
    - Collabration - Real-time code Sync.
    - Execution - 


Approach : 
   - Roles : Interviewer, Candidate - Invited User's, User -        Platform Users.
   - Interviewer Auth.. 
   - Creating Interview Session
   - Generate Invitation Link
   - Candidate Joins Interview - Between Auth for Candidate
   - Voice and Video Call for more Transparency
   - Code Execution - Run, Test Cases and etc..
   - Interviewer Feedback for Interview

MicroService :   
   - FrontEnd
   - Backend : 
      - Auth + Session + Profile Management 
      - Collabrative Code Sync Feature - WebSockets + Video Call Support
      - Code Execution Service  - Apache Kafka for service.  communication.


Database Design : 

User Model :
    - id <String>
    - name <String>
    - email <String>
    - hashPassword <String>
    - role <String>
    - CreatedAt 
    - UpdatedAt 
    - session Session[]

// Interview Session - Database Schema
Session Model : 
    - id <String>
    - title <String?>
    - interviewer User[]
    - invterviwerId String
    - participants User[]
    - problem Problem?
    - problemId Problem[]
    - createdAt 
    - startsAt DateTime?
    - endsAt DateTime?
    - executions Execution[]

// Problem Statement - Database Schema
Problem Model :    
    - id <String>
    - title <String>
    - description <String>
    - testCases TestCases[]
    - createdAt DateTime

// Storing Test Cases
TestCase Model : 
    - id <String>
    - problem Problem[]
    - problemId <String>
    - input
    - excepted
    - order int

Execution Model :
    - id <String>
    - session Session[]
    - sessionId <String>
    - user User[]
    - userId <String>
    - Code <String>
    - language <String>
    - status 
    - createdAt DateTime
    - completedAt DateTime
    - result TestResult[]

TestResult Model : 
    - id <String>
    - execution Execution
    - executionId <String>
    - testCases TestCase[]
    - testCaseId <String>
    - passed Boolean
    - output String

enum Role {ADMIN,  INTERVIEWER, CANDIDATE};
enum ExecutionStatus {PENDING, RUNNING, SUCCESS, FAILED}

